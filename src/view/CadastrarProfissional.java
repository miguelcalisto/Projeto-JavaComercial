/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ProfissionalDeSaudeController;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.beans.ProfissionalDeSaude;
import model.dao.ProfissionalDeSaudeDAO;

/**
 *
 * @author debian
 */
public class CadastrarProfissional extends javax.swing.JFrame {

    private ProfissionalDeSaudeController controller;

    /**
     * Creates new form cadastrarProfissional
     */
    public CadastrarProfissional() {
        initComponents();
        controller = new ProfissionalDeSaudeController();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        txtRegistroProfissional = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnConsultar = new javax.swing.JButton();
        jfCPF = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProfissional = new javax.swing.JTable();
        btnListaTodos = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jLabel1.setText("Cadastrar Profissional");

        jLabel2.setText("nome");

        jLabel3.setText("cpf");

        jLabel4.setText("registro profissional");

        txtRegistroProfissional.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegistroProfissionalActionPerformed(evt);
            }
        });

        btnSalvar.setText("salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnAlterar.setText("alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setText("excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnConsultar.setText("consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        try {
            jfCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-## ")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        tblProfissional.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "CPF", "Registro Profissional"
            }
        ));
        jScrollPane1.setViewportView(tblProfissional);

        btnListaTodos.setText("Listar Todos");
        btnListaTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListaTodosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSalvar)
                                .addGap(40, 40, 40)
                                .addComponent(btnExcluir)
                                .addGap(18, 18, 18)
                                .addComponent(btnAlterar)
                                .addGap(18, 18, 18)
                                .addComponent(btnConsultar)
                                .addGap(27, 27, 27)
                                .addComponent(btnListaTodos))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(134, 134, 134)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtRegistroProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))))
                        .addGap(0, 170, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jfCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegistroProfissional, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvar)
                    .addComponent(btnExcluir)
                    .addComponent(btnAlterar)
                    .addComponent(btnConsultar)
                    .addComponent(btnListaTodos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        // TODO add your handling code here:
//        int linhaSelecionada = tblProfissional.getSelectedRow();
//
//        if (linhaSelecionada == -1) {
//            JOptionPane.showMessageDialog(this, "Selecione um profissional na tabela para consultar.");
//            return;
//        }
//
//        int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());
//
//        ProfissionalDeSaudeDAO dao = new ProfissionalDeSaudeDAO();
//        ProfissionalDeSaude profissional = dao.buscarPorId(id);
//
//        if (profissional != null) {
//            txtNome.setText(profissional.getNome());
//            txtRegistroProfissional.setText(String.valueOf(profissional.getRegistroProfissional()));
//            jfCPF.setText(profissional.getCpf());
//        } else {
//            JOptionPane.showMessageDialog(this, "Profissional n√£o encontrado.");
//        }
//
//        carregarTabelaProfissionais();
        int linhaSelecionada = tblProfissional.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um profissional na tabela para consultar.");
            return;
        }

        int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());

        ProfissionalDeSaude profissional = controller.buscarPorId(id);

        if (profissional != null) {
            txtNome.setText(profissional.getNome());
            txtRegistroProfissional.setText(String.valueOf(profissional.getRegistroProfissional()));
            jfCPF.setText(profissional.getCpf());
        } else {
            JOptionPane.showMessageDialog(this, "Profissional n√£o encontrado.");
        }

        carregarTabelaProfissionais();

    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
//
//        ProfissionalDeSaude profissional = new ProfissionalDeSaude();
//
//        if (txtNome.getText().trim().isEmpty() || jfCPF.getText().trim().isEmpty() || txtRegistroProfissional.getText().trim().isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigat√≥rios.");
//            return;
//        }
//
//        profissional.setNome(txtNome.getText());
//        profissional.setCpf(jfCPF.getText());
//
//        try {
//            int registro = Integer.parseInt(txtRegistroProfissional.getText());
//            profissional.setRegistroProfissional(registro);
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Registro Profissional inv√°lido. Digite um n√∫mero.");
//            return;
//        }
//
//        ProfissionalDeSaudeDAO dao = new ProfissionalDeSaudeDAO();
//        dao.salvar(profissional);
//
//        JOptionPane.showMessageDialog(this, "Profissional de saude salvo com sucesso");
//        limparCampos();
//        carregarTabelaProfissionais();

        ProfissionalDeSaude profissional = new ProfissionalDeSaude();

        if (txtNome.getText().trim().isEmpty() || jfCPF.getText().trim().isEmpty() || txtRegistroProfissional.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigat√≥rios.");
            return;
        }

        profissional.setNome(txtNome.getText());
        profissional.setCpf(jfCPF.getText());

        try {
            int registro = Integer.parseInt(txtRegistroProfissional.getText());
            profissional.setRegistroProfissional(registro);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Registro Profissional inv√°lido. Digite um n√∫mero.");
            return;
        }

        String resultado = controller.cadastrarProfissional(profissional);
        JOptionPane.showMessageDialog(this, resultado);
        limparCampos();
        carregarTabelaProfissionais();

    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:
//        int linhaSelecionada = tblProfissional.getSelectedRow();
//
//        if (linhaSelecionada == -1) {
//            JOptionPane.showMessageDialog(this, "Selecione um profissional para alterar.");
//            return;
//        }
//
//        int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());
//
//        ProfissionalDeSaude profissional = new ProfissionalDeSaude();
//        profissional.setId(id);
//        profissional.setNome(txtNome.getText().trim());
//        profissional.setCpf(jfCPF.getText().trim());
//
//        try {
//            profissional.setRegistroProfissional(Integer.parseInt(txtRegistroProfissional.getText()));
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Registro Profissional deve ser um n√∫mero.");
//            return;
//        }
//
//        ProfissionalDeSaudeDAO dao = new ProfissionalDeSaudeDAO();
//        dao.alterarPorId(profissional);
//
//        JOptionPane.showMessageDialog(this, "Profissional de sa√∫de alterado com sucesso!");
//        limparCampos();
//        carregarTabelaProfissionais();
        int linhaSelecionada = tblProfissional.getSelectedRow();

        if (linhaSelecionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um profissional para alterar.");
            return;
        }

        int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());

        ProfissionalDeSaude profissional = new ProfissionalDeSaude();
        profissional.setId(id);
        profissional.setNome(txtNome.getText().trim());
        profissional.setCpf(jfCPF.getText().trim());

        try {
            profissional.setRegistroProfissional(Integer.parseInt(txtRegistroProfissional.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Registro Profissional deve ser um n√∫mero.");
            return;
        }

        String resultado = controller.alterarProfissional(profissional);
        JOptionPane.showMessageDialog(this, resultado);
        limparCampos();
        carregarTabelaProfissionais();


    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
//        int linhaSelecionada = tblProfissional.getSelectedRow();
//
//        if (linhaSelecionada != -1) {
//            int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());
//
//            int confirm = JOptionPane.showConfirmDialog(this,
//                    "Tem certeza que deseja excluir o profissional selecionado?",
//                    "Confirma√ß√£o", JOptionPane.YES_NO_OPTION);
//
//            if (confirm == JOptionPane.YES_OPTION) {
//                ProfissionalDeSaudeDAO dao = new ProfissionalDeSaudeDAO();
//                dao.excluirPorId(id);
//                JOptionPane.showMessageDialog(this, "Profissional exclu√≠do com sucesso!");
//
//                limparCampos();
//                carregarTabelaProfissionais();
//            }
//        } else {
//            JOptionPane.showMessageDialog(this, "Selecione um profissional para excluir.");
//        }
        int linhaSelecionada = tblProfissional.getSelectedRow();

        if (linhaSelecionada != -1) {
            int id = Integer.parseInt(tblProfissional.getValueAt(linhaSelecionada, 0).toString());

            int confirm = JOptionPane.showConfirmDialog(this,
                    "Tem certeza que deseja excluir o profissional selecionado?",
                    "Confirma√ß√£o", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                String resultado = controller.excluirProfissional(id);
                JOptionPane.showMessageDialog(this, resultado);

                limparCampos();
                carregarTabelaProfissionais();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um profissional para excluir.");
        }


    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnListaTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListaTodosActionPerformed
        // TODO add your handling code here:
        carregarTabelaProfissionais();
    }//GEN-LAST:event_btnListaTodosActionPerformed

    private void txtRegistroProfissionalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRegistroProfissionalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRegistroProfissionalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CadastrarProfissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CadastrarProfissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CadastrarProfissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CadastrarProfissional.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CadastrarProfissional().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnListaTodos;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jfCPF;
    private javax.swing.JTable tblProfissional;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtRegistroProfissional;
    // End of variables declaration//GEN-END:variables
private void limparCampos() {
        txtNome.setText("");
        jfCPF.setText("");
        txtRegistroProfissional.setText("");
    }

    private void carregarTabelaProfissionais() {
//        DefaultTableModel modelo = (DefaultTableModel) tblProfissional.getModel();
//        modelo.setRowCount(0);
//
//        ProfissionalDeSaudeDAO dao = new ProfissionalDeSaudeDAO();
//        List<ProfissionalDeSaude> lista = dao.listarTodos();
//
//        for (ProfissionalDeSaude p : lista) {
//            modelo.addRow(new Object[]{
//                p.getId(),
//                p.getNome(),
//                p.getCpf(),
//                p.getRegistroProfissional()
//            });
//        }
//    }
        DefaultTableModel modelo = (DefaultTableModel) tblProfissional.getModel();
        modelo.setRowCount(0);

        List<ProfissionalDeSaude> lista = controller.listarTodos();

        for (ProfissionalDeSaude p : lista) {
            modelo.addRow(new Object[]{
                p.getId(),
                p.getNome(),
                p.getCpf(),
                p.getRegistroProfissional()
            });
        }
    }

}
